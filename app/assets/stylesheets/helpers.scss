/* -- Helpers -- */
.vh {
  height: 100vh;
}

.box-shadow {
  -webkit-box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.1);
  box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.1);
}

.top-right {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
}

.top-left {
  position: absolute;
  top: 1.5rem;
  left: 1.5rem;
}

.cursor {
  cursor: pointer;
}

.hidden {
  visibility: hidden;
}

.text-sm {
  font-size: 87.5%;
}
/* -- Borders -- */
// Use grid breakpoints to specify the size where the border will start to display
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    .b#{$infix}  {border: 1px solid $gray-200;}
    .bl#{$infix} {border-left: 1px solid $gray-200;}
    .br#{$infix} {border-right: 1px solid $gray-200;}
    .bb#{$infix} {border-bottom: 1px solid $gray-200;}
    .bt#{$infix} {border-top: 1px solid $gray-200;}
  }
}

// Use grid breakpoints to specify the size where the border will stop displaying
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-down($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    .b0#{$infix}  {border: none;}
  }
}

.text-underline {
  text-decoration: underline;
}

/* -- Transitions -- */
.transition {
  -webkit-transition: all .5s ease-in-out;
  transition: all .5s ease-in-out;
}

/* -- Maps -- */
#map {
  @extend .box-shadow;
  width: 100%;
  height: 18rem;
}

/* -- Typography -- */
.logo__text {
  font-weight: 600;
  font-family: $font-family-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.text-white-muted {
  color: rgba($white, 0.8);
}

.lh-0 { line-height: 0; }
.lh-1 { line-height: 100%; }
.lh-2 { line-height: 150%; }
.lh-3 { line-height: 200%; }

.zi-0 { z-index: 0 }
.zi-1 { z-index: 1 }
.zi-2 { z-index: 2 }

@mixin banner__image($height, $url, $opacity){
  height: $height;
  background-image: linear-gradient(rgba(0, 0, 0, $opacity), rgba(0, 0, 0, $opacity)), image_url($url);
}

@each $color, $value in $theme-colors {
  .fill-#{$color} {
    fill: $value;
  }
}
